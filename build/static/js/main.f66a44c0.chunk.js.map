{"version":3,"sources":["common/Chart.jsx","Graph/Graph.jsx","Graph/index.js","store/reducer.js","Home/Home.jsx","Home/index.js","App.js","serviceWorker.js","index.js"],"names":["LineChart","data","title","className","polar","height","interpolation","style","stroke","labels","datum","y","size","fill","Graph","weatherData","city","list","name","history","useHistory","useEffect","push","listData","useMemo","lastDate","slice","filter","value","dt_txt","dataDate","Date","toISOString","pressureData","map","pressure","main","x","humidityData","humidity","tempData","temp","onClick","connect","state","props","initialStata","reducer","action","type","Home","getWeatherDetails","useState","cityName","setCityName","onChange","e","target","placeholder","then","str","dispatch","axios","get","res","App","path","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f66a44c0.chunk.js","sourcesContent":["import React from 'react';\nimport { VictoryChart, VictoryLine, VictoryScatter } from \"victory\";\n\nconst LineChart = ({ data, title }) => {\n    return (\n        <div className='chart-container'>\n            <span className='title'>{title}</span>\n            <VictoryChart polar={false} height={390}>\n                <VictoryLine\n                    interpolation='linear'\n                    data={data}\n                    style={{ data: { stroke: \"#c43a31\" } }}\n                    labels={({ datum }) => datum.y}\n                />\n                <VictoryScatter\n                    data={data}\n                    size={5}\n                    style={{ data: { fill: \"#c43a31\" } }}\n                />\n            </VictoryChart>\n        </div>\n    )\n}\n\nexport default LineChart;","import React, { useEffect, useMemo } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport LineChart from '../common/Chart';\n\nconst Graph = ({ weatherData }) => {\n    const { city = {}, list = [] } = weatherData || {};\n    const { name = '' } = city || {};\n    let history = useHistory();\n\n    useEffect(() => {\n        !name && history.push(\"/\");\n        // navigate to home if user try to land on the chart page\n    }, [name])\n\n    const listData = useMemo(() => { //Generate array for last 4 date\n        let lastDate = '';\n        return list.slice(0, 25).filter((value) => {\n            const { dt_txt = '' } = value || {};\n            const dataDate = new Date(dt_txt).toISOString().slice(0, 10);\n            if (lastDate !== dataDate) {\n                lastDate = dataDate;\n                return value;\n            }\n\n        })\n    }, [list]);\n\n    const pressureData = useMemo(() => {    //Generate Pressure data for chart\n        return listData.map((value) => {\n            const { dt_txt = '', main: { pressure } } = value || {};\n            const dataDate = new Date(dt_txt).toISOString().slice(0, 10);\n            return { x: dataDate, y: pressure }\n        })\n    }, [listData]);\n    const humidityData = useMemo(() => {    //Generate Humidity data for chart\n        return listData.map((value) => {\n            const { dt_txt = '', main: { humidity } } = value || {};\n            const dataDate = new Date(dt_txt).toISOString().slice(0, 10);\n            return { x: dataDate, y: humidity }\n        })\n    }, [listData]);\n    const tempData = useMemo(() => {    //Generate Temperature data for chart\n        return listData.map((value) => {\n            const { dt_txt = '', main: { temp } } = value || {};\n            const dataDate = new Date(dt_txt).toISOString().slice(0, 10);\n            return { x: dataDate, y: temp }\n        })\n    }, [listData]);\n\n    return (\n        <>\n            <div className='all-container'>\n                {name ?\n                    <>\n                        <div className='header'>\n                            <button className='back-button' onClick={() => { history.push(\"/\") }}>Home</button>\n                            <span className='city-name'>{name}</span>\n                        </div>\n                        <div className='template-all-container'>\n                            <LineChart data={pressureData} title='Pressure' />\n                            <LineChart data={humidityData} title='Humidity' />\n                            <LineChart data={tempData} title='Temperature' />\n                        </div>\n                    </> : <p>No City Data Found</p>\n                }\n            </div>\n        </>\n    )\n}\n\nexport default Graph;","import { connect } from 'react-redux';\nimport Graph from './Graph';\n\nconst mapStateToProps = (state, props) => {\n    return {\n        weatherData: state.weatherData\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n\n    },\n)(Graph);\n\n","import axios from 'axios';\n\nconst initialStata = {\n    weatherData: {}\n}\n\nexport const reducer = (state = initialStata, action) => {\n    switch (action.type) {\n        case \"CITY_WEATHER_GET\":\n            return {\n                ...state,\n                weatherData: action.weatherData\n            }\n        default:\n            return state;\n    }\n}\n\nexport function getWeatherDetails(str = 'London') {\n    return (dispatch) => {\n        return axios.get(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast?q=${str}&appid=aff21b6bbee22375db75b1e8f147bab4`)\n            .then(res => {\n                dispatch({ type: \"CITY_WEATHER_GET\", weatherData: res.data });\n                return res.data;\n            })\n    };\n}\nexport default reducer;","import React, { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nconst Home = ({ getWeatherDetails, ...props }) => {\n    const [cityName, setCityName] = useState('London');\n    let history = useHistory();\n\n    const getWeather = () => {\n        getWeatherDetails(cityName)\n            .then(data => {\n                history.push(\"/Graph\");\n                // navigate to Graph page when weather API call is done\n            })\n    }\n\n    return (\n        <div className='weather-home-container'>\n            <input type='text' onChange={(e) => setCityName(e.target.value)} placeholder='Enter a city name' />\n            <button onClick={() => getWeather()}>Get the forecast</button>\n        </div>\n\n    )\n}\n\nexport default Home;","import { connect } from 'react-redux';\nimport { getWeatherDetails } from '../store/reducer';\nimport Home from './Home';\n\nconst mapStateToProps = (state, props) => {\n    return {\n\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    {\n        getWeatherDetails\n    },\n)(Home);\n\n","\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport Graph from './Graph';\nimport Home from './Home';\n\nexport default function App() {\n\treturn (\n\t\t<div>\n\t\t\t<Router>\n\t\t\t\t<div>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/Graph\">\n\t\t\t\t\t\t\t<Graph />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t\t<div className='header'>\n\t\t\t\t\t\t\t\t<span className='city-name'>Weather App</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<Home />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}